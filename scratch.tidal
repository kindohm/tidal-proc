-- test

let gtfo p = (const $ note "~") $ p

do
  let modx p = spaceOut (map (1/) [1,3,2.5,3.5,1.25,2,3.25,4,0.75,1.125,1.5]) $ p
  rytm $ whenmod 10 5 (# scene "0.01") $ modx $ midinote "2" # scene "0"
  harmor $
    whenmod 10 5 ((# ab "1") . (|+| note "-3")) $
    (# x (scale 0 1 $ slow 10 sine)) $
    (# y (scale 0 1 $ slow 11 sine)) $
    (# z (scale 0 1 $ slow 12 sine)) $
    modx $ note "0" # ab "0"
  vis $
    whenmod 10 5 (# view "1") $
    (# a (scale 0 1 $ slow 10 sine)) $
    (# b (scale 0 1 $ slow 11 $ (0.25 <~) $ sine)) $
    (# c (scale 0 1 $ slow 12 sine)) $
    modx $
    setting "foo"
    # view "0"

  hush

  vis $ reset "1 0" # a (rand)


hush


harmor $ note "0"
rytm $ midinote "0"


let sprefix p = with s_p (liftA2 (++) (p::Pattern String))
let banks samp = sprefix samp

do
  let pat = "{1 0 0 1 0 0 1 0 1 0 1 1 1 0 0 0 0 0 1}%8"
  d1 $ rarely (# s "bank1-scene1-hit2") $ gain pat # s "bank1-scene1-hit1"


d1 silence

-- est

hush

let shift p = (1<~) $ p
    shift' x p = (x <~) $ p

do
  let patcat = shift' 3 $ sometimesBy 0.5 ((+1) <$>) $ shift' 2 $ "0*8"
      mod p = id $ degradeBy 0.8 $ density 8 $ p
  vis $ shift $
    mod $
    hit patcat
    # view "[scene2b scene2]/8"
    # a (discretise (1/200) $ scale 0 1 $ slow 1.1 rand)
    # b (discretise (1/200) $ scale 0 1 $ slow 1.2 rand)
    # c (discretise (1/200) $ scale 0 1 $ slow 1.3 rand)
    # d (scale 0 1 $ slow 1.5 rand)
    # fade (scale 0 1 $ slow 1.4 rand)
    # nudge "0.30"
  d1 $
      mod $
      n patcat
        # s "[z z xf w]/32"
        # cut "1"
        # orbit "0" # size (scale 0.01 0.9 $ slow 10 tri)
        # room "0"
        # lpf (scale 1000 20000 $ slow 10 sine)
        # speed (scale 0.9 1.1 $ slow 20 tri)

do
  d1 silence
  vis silence


vis $ hit "1*4 0*4" # view "scene1" # a "0.2" # b "0.1" # c "0.4"  # fade "0.9"
